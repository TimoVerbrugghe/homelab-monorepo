services:
  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    restart: always
    networks:
      - dockerproxy
    environment:
      - PUID=${PUID:-3000}
      - PGID=${PGID:-3000}
      - TZ=Europe/Brussels
    volumes:
      - sonarr:/config
      - tvshows:/tv
      - downloads:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8989/ping || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 60
    ports:
      - 14000:8989
    labels:
      tsdproxy.enable: true
      tsdproxy.name: "sonarr"
      tsdproxy.container_port: 8989
      tsdproxy.ephemeral: false

  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    restart: always
    networks:
      - dockerproxy
    environment:
      - PUID=${PUID:-3000}
      - PGID=${PGID:-3000}
      - TZ=Europe/Brussels
    volumes:
      - radarr:/config
      - movies:/movies
      - downloads:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:7878/ping || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 60
    ports:
      - 14001:7878
    labels:
      tsdproxy.enable: true
      tsdproxy.name: "radarr"
      tsdproxy.container_port: 7878
      tsdproxy.ephemeral: false

  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    restart: always
    networks:
      - dockerproxy
    environment:
      - PUID=${PUID:-3000}
      - PGID=${PGID:-3000}
      - TZ=Europe/Brussels
    volumes:
      - bazarr:/config
      - movies:/movies
      - tvshows:/tv
    depends_on:
      sonarr:
        condition: service_started
      radarr:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:6767/api/v1/status || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 60
    ports:
      - 14002:6767
    labels:
      tsdproxy.enable: true
      tsdproxy.container_port: 6767
      tsdproxy.name: "bazarr"
      tsdproxy.ephemeral: false

  overseerr:
    container_name: overseerr
    image: sctx/overseerr:latest
    restart: always
    networks:
      - dockerproxy
    environment:
      - LOG_LEVEL=debug
      - TZ=Europe/Brussels
    volumes:
      - overseerr:/app/config
    healthcheck:
      test: ["CMD-SHELL", "wget http://localhost:5055/api/v1/status -qO /dev/null || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 60
    ports:
      - 14003:5055
    labels:
      tsdproxy.container_port: 5055
      tsdproxy.enable: true
      tsdproxy.name: "request"
      tsdproxy.ephemeral: false

  prowlarr:
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:latest
    restart: always
    networks:
      - dockerproxy
    environment:
      - PUID=${PUID:-3000}
      - PGID=${PGID:-3000}
      - TZ=Europe/Brussels
    volumes:
      - prowlarr:/config
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9696/ping || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 60
    ports:
      - 14004:9696
    labels:
      tsdproxy.container_port: 9696
      tsdproxy.enable: true
      tsdproxy.name: "prowlarr"
      tsdproxy.ephemeral: false
  
  recyclarr:
    image: ghcr.io/recyclarr/recyclarr
    container_name: recyclarr
    user: ${PUID:-3000}:${PGID:-3000}
    networks:
      - dockerproxy
    volumes:
      - recyclarr:/config
    environment:
      - TZ=Europe/Brussels
      - CRON_SCHEDULE=@daily

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: always
    networks:
      - dockerproxy
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Europe/Brussels

  swaparr-radarr:
    image: ghcr.io/thijmengthn/swaparr:latest
    container_name: swaparr-radarr
    restart: always
    networks:
      - dockerproxy
    environment:
      - BASEURL=http://radarr:7878    # IP or FQDN           (Required)
      - APIKEY=${RADARR_API_KEY}      # Radarr API Key       (Required)                
      - PLATFORM=radarr               # "radarr", "sonarr".. (Optional) default: radarr
      - TIME_THRESHOLD=2h             # 1d, 6h, 30m, etc..   (Optional) default: 2h    
      - SIZE_THRESHOLD=100GB           # 1TB, 1GB, 1MB, etc.. (Optional) default: 25GB  
      - CHECK_INTERVAL=10m            # 1d, 6h, 30m, etc..   (Optional) default: 10m   
      - STRIKE_THRESHOLD=3            # Positive number      (Optional) default: 3     
      - AGGRESSIVE_STRIKES=true      # Boolean              (Optional) default: false 

  swaparr-sonarr: 
    image: ghcr.io/thijmengthn/swaparr:latest
    container_name: swaparr-sonarr
    restart: always
    networks:
      - dockerproxy
    environment:
      - BASEURL=http://sonarr:8989    # IP or FQDN           (Required)
      - APIKEY=${SONARR_API_KEY}      # Radarr API Key       (Required)                
      - PLATFORM=radarr               # "radarr", "sonarr".. (Optional) default: radarr
      - TIME_THRESHOLD=2h             # 1d, 6h, 30m, etc..   (Optional) default: 2h    
      - SIZE_THRESHOLD=100GB           # 1TB, 1GB, 1MB, etc.. (Optional) default: 25GB  
      - CHECK_INTERVAL=10m            # 1d, 6h, 30m, etc..   (Optional) default: 10m   
      - STRIKE_THRESHOLD=3            # Positive number      (Optional) default: 3     
      - AGGRESSIVE_STRIKES=true      # Boolean              (Optional) default: false

  huntarr:
    image: huntarr/huntarr:latest
    container_name: huntarr
    restart: always
    networks:
      - dockerproxy
    ports:
      - 14005:9705
    volumes:
      - huntarr:/config
    environment:
      - TZ=Europe/Brussels

  yamtrack:
    container_name: yamtrack
    image: ghcr.io/fuzzygrim/yamtrack
    restart: unless-stopped
    networks:
      - dockerproxy
    depends_on:
      - yamtrack-redis
    environment:
      - TZ=Europe/Berlin
      - SECRET=longstring
      - REDIS_URL=redis://yamtrack-redis:6379
    volumes:
      - yamtrack-db:/yamtrack/db
    ports:
      - 14006:8000

  yamtrack-redis:
    container_name: yamtrack-redis
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - dockerproxy
    volumes:
      - yamtrack-redis:/data

networks:
  dockerproxy:
    external: true

volumes:
  sonarr:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/sonarr"
  bazarr:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/bazarr"
  radarr:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/radarr"
  overseerr:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/overseerr"
  prowlarr:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/prowlarr"
  recyclarr:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/recyclarr"
  yamtrack-db:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/yamtrack/yamtrack-db"
  yamtrack-redis:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/yamtrack/yamtrack-redis"

  movies:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/X.A.N.A./media/movies"
  tvshows:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/X.A.N.A./media/tvshows"
  downloads:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/downloads"
  music:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/X.A.N.A./media/music"
  huntarr:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/FranzHopper/appdata/huntarr"
