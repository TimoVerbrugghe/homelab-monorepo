#! /usr/bin/env bash

## This script was heavily inspired by the pve-helpers from ayufan (https://github.com/ayufan/pve-helpers)

# Proxmox always launches scripts with 2 variables, first the VM ID and secondly the execution phase
# Execution phase is either pre-start, post-start, pre-stop and post-stop
VMID=$1
EXECUTION_PHASE=$2

# Define CPU cores to which VM needs to be pinned to
# My Ryzen 5 3600x has 6 cores, 12 threads. Thread 0 & 6 are on the same core. Pinning all cores (and corresponding threads) EXCEPT for core 0 to the VM
VMCPUSET="1-5,7-11"
HOSTCPUSET="0,6"

function vmpid() {
    cat "/var/run/qemu-server/$VMID.pid"
}

function enable_cpuisolation() {
    # Setting proxmox to only use the first core (and its hyperthreaded counterpart) so VM can exclusively use all other cores

    systemctl set-property --runtime -- user.slice AllowedCPUs=$HOSTCPUSET
    systemctl set-property --runtime -- system.slice AllowedCPUs=$HOSTCPUSET
    systemctl set-property --runtime -- init.scope AllowedCPUs=$HOSTCPUSET
}

function disable_cpuisolation() {
    # Setting proxmox to use all CPU cores
    
    systemctl set-property --runtime -- user.slice AllowedCPUs=$HOSTCPUSET
    systemctl set-property --runtime -- system.slice AllowedCPUs=$HOSTCPUSET
    systemctl set-property --runtime -- init.scope AllowedCPUs=$HOSTCPUSET
}

function enable_cpupinning() {
    # Pin VM to specific CPUs using taskset (this is the same as using vcpupin in libvirt.xml)
    # For taskset we need the VM pid so we grab that because proxmox saves it in a file
    taskset --all-tasks --cpu-list --pid $VMCPUSET "$(vmpid)"
}

function set_halt_poll() {
    # In practice, most Ryzen systems work best when halt_poll_ns is disabled (0)
    echo 0 > /sys/module/kvm/parameters/halt_poll_ns
}

function assign_interrupts() {
    # The goal is to have the same cores assigned to the VM using cpu_taskset, be responsible for the interrupts generated by the devices that are fully passed through to the VM (aka the graphics card)

    # Waiting some time for all vfio-gpu interrupts to show up
    sleep "10s"

    # Grabbing all the hostpci_ids from the VMID.conf file. This file will contain all PCIe device addresses that you want to passthrough.
    set -- $(grep '^hostpci[0-9]:.*0000' "/etc/pve/qemu-server/$VMID.conf" | awk '{print $2}' | awk -F, '{print $1}')

    # For each hostpci address that we find
    for interrupt; do
        interrupt=$(printf '%b' "${interrupt//%/\\x}")

        # Pin interrupts to the CPU cores of the VM
        # We grab the IRQ number of the hostpci address from /proc/interrupts
        grep "$interrupt" /proc/interrupts | cut -d ":" -f 1 | while read -r i; do
            echo "Moving $interrupt interrupts to $VMCPUSET cpu cores $VMID..."
            # Then we use that number ($i) to find the smp_affinity_list file and overwrite it with the assigned CPU cores of our VM
            echo "- IRQ: $(grep "^\s*$i:" /proc/interrupts)"
            echo $CPUSET > /proc/irq/$i/smp_affinity_list
        done
    done
}

function set_cpu_emulatorpin() {
    # Set the emulator thread on a CPU core that is NOT one of the CPU cores of the VM
    taskset --all-tasks --cpu-list --pid $HOSTCPUSET "$(vmpid)"
}

function set_cpu_governor_performance() {
    # Set CPU governor to performance if Windows VM is running
    echo "performance" | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
}

function set_cpu_governor_ondemand() {
    # Set CPU governor back to ondemand if VM is shut down
    echo "ondemand" | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
}

# Execute the above commands in order based on when a VM is starting, started or stopped

if [[ "$EXECUTION_PHASE" == "pre-start" ]]; then

    echo "$VMID (WindowsVM) is starting up. Setting proxmox to only use CPU cores not assigned to this VM (aka isolating CPU cores)."

    enable_cpuisolation

    echo "Setting CPU governor to performance"

    set_cpu_governor_performance

elif [[ "$EXECUTION_PHASE" == "post-start" ]]; then

    echo "$VMID (WindowsVM) has started. Making sure that VM ONLY runs on its assigned cores using taskset. (CPU pinning)"

    enable_cpupinning

    echo "Setting Halt Poll policy"

    set_halt_poll

    echo "Set Assign Interrupts for PCIe devices that I pass through"

    assign_interrupts

elif [[ "$EXECUTION_PHASE" == "post-stop" ]] then

    echo "$VMID (WindowsVM) has shut down. Setting proxmox to use all CPU cores."

    disable_cpuisolation

    echo "Setting CPU governor back to ondemand"

    set_cpu_governor_ondemand

fi
