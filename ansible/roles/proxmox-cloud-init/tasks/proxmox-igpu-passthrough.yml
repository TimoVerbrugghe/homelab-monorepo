
- name: Create cmdline directory
  ansible.builtin.file:
    path: /etc/kernel/cmdline.d
    state: directory
    mode: '0644'

- name: Check if /etc/kernel/cmdline contains command line parameters for iGPU passthrough
  find:
    paths: /etc/kernel/
    patterns: cmdline
    contains: ^.*intel_iommu=on iommu=pt vfio_pci.ids={{ vfio_pci_ids }}.*$
  register: igpu_cmdline_find

- name: Append /etc/kernel/cmdline with command line parameters for iGPU passthrough
  ansible.builtin.lineinfile:
    path: /etc/kernel/cmdline
    backrefs: true
    regexp: ^(.*)$
    line: \1 intel_iommu=on iommu=pt vfio_pci.ids={{ vfio_pci_ids }}
  when: igpu_cmdline_find.matched == 0

- name: Check if /etc/kernel/cmdline contains command line parameters for optimizations
  find:
    paths: /etc/kernel/
    patterns: cmdline
    contains: ^.*mitigations=off transparent_hugepage=always.*$
  register: optimizations_cmdline_find

- name: Append /etc/kernel/cmdline with command line parameters for optimizations
  ansible.builtin.lineinfile:
    path: /etc/kernel/cmdline
    backrefs: true
    regexp: ^(.*)$
    line: \1 mitigations=off transparent_hugepage=always
  when: optimizations_cmdline_find.matched == 0

- name: Create vfio.conf
  ansible.builtin.copy:
    dest: /etc/modules-load.d/vfio.conf
    content: |
      vfio
      vfio_iommu_type1
      vfio_pci

- name: Create gpu-blacklist.conf
  ansible.builtin.copy:
    dest: /etc/modprobe.d/gpu-blacklist.conf
    content: |
      blacklist nouveau
      blacklist snd_hda_intel
      blacklist snd_hda_codec_hdmi
      blacklist i915

- name: Update initramfs
  ansible.builtin.command: 
    cmd: update-initramfs -u -k all

- name: Refresh Boot
  ansible.builtin.command: 
    cmd: proxmox-boot-tool refresh

- name: Reboot (so we can apply all these iGPU passthrough settings)
  ansible.builtin.reboot:
